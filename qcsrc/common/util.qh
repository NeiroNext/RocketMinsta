// note: this is in util.qh so it is included as early as possible.
var void(string s, ...) dprint;
void dprint_null() { }
void dprint_load()
{
	if(cvar("developer") > 0)
		dprint = print;
	else
		dprint = dprint_null;
}

string ftos(float f);

// this returns a tempstring containing a copy of s with additional \n newlines added, it also replaces \n in the text with a real newline
// NOTE: s IS allowed to be a tempstring
string wordwrap(string s, float l);
#ifndef MENUQC
#ifndef CSQC
void wordwrap_sprint(string s, float l);
#endif
#endif
void wordwrap_cb(string s, float l, void(string) callback);

float GameCommand_Generic(string cmd);
// returns TRUE if handled, FALSE otherwise
// uses tokenize on its argument!

// iterative depth-first search, with fields that go "up", "down left" and "right" in a tree
// for each element, funcPre is called first, then funcPre and funcPost for all its children, and funcPost last
void depthfirst(entity start, .entity up, .entity downleft, .entity right, void(entity, entity) funcPre, void(entity, entity) funcPost, entity pass);

float median(float a, float b, float c);

// converts a number to a string with the indicated number of decimals
// works for up to 10 decimals!
string ftos_decimals(float number, float decimals);

vector colormapPaletteColor(float c, float isPants);

// unzone the string, and return it as tempstring. Safe to be called on NULL
string fstrunzone(string s);

// database (NOTE: keys are case sensitive)
void db_save(float db, string filename);
void db_dump(float db, string pFilename);
float db_create();
float db_load(string filename);
void db_close(float db);
string db_get(float db, string key);
void db_put(float db, string key, string value);

// stringbuffer loading/saving
float buf_load(string filename);
void buf_save(float buf, string filename);

// modulo function
#ifndef MENUQC
float mod(float a, float b) { return a - (floor(a / b) * b); }   
#endif

#define TIME_TO_NTHS(t,n) floor((t) * (n) + 0.4)
string mmsss(float t);
string mmssss(float t);

#define TIME_DECIMALS 2
#define TIME_FACTOR 100
#define TIME_ENCODED_TOSTRING(n) mmssss(n)
#define RACE_RECORD "/race100record/"
#define CTS_RECORD "/cts100record/"
#define TIME_ENCODE(t) TIME_TO_NTHS(t, TIME_FACTOR)
#define TIME_DECODE(n) ((n) / TIME_FACTOR)

string ScoreString(float vflags, float value);

vector cross(vector a, vector b);

void compressShortVector_init();
vector decompressShortVector(float data);
float compressShortVector(vector vec);

#ifndef MENUQC
float CheckWireframeBox(entity forent, vector v0, vector dvx, vector dvy, vector dvz);

#endif

string fixPriorityList(string pl, float from, float to, float subtract, float complete);
string swapInPriorityList(string order, float i, float j);

float cvar_value_issafe(string s);

void cvar_settemp(string pKey, string pValue);
void cvar_settemp_restore();

#ifndef MENUQC
// modes: 0 = trust q3map2 (_mini images)
//        1 = trust tracebox (_radar images)
// in both modes, mapinfo's "size" overrides

string mi_shortname;
vector mi_min;
vector mi_max;
void get_mi_min_max(float mode);

vector mi_picmin; // adjusted mins that map to the picture (square)
vector mi_picmax; // adjusted maxs that map to the picture (square)
vector mi_pictexcoord0; // texcoords of the image corners (after transforming, these are 2D coords too)
vector mi_pictexcoord1; // texcoords of the image corners (after transforming, these are 2D coords too)
vector mi_pictexcoord2; // texcoords of the image corners (after transforming, these are 2D coords too)
vector mi_pictexcoord3; // texcoords of the image corners (after transforming, these are 2D coords too)
void get_mi_min_max_texcoords(float mode);
#endif

#define FTEQCC_YOU_SUCK_THIS_IS_NOT_UNREFERENCED(x) void reference_##x() { x = x; }

float almost_equals(float a, float b);
float almost_in_bounds(float a, float b, float c);

float power2of(float e);
float log2of(float x);
float log(float x);

string HEXDIGITS = "0123456789ABCDEF0123456789abcdef";
#define HEXDIGIT_TO_DEC_RAW(d) (strstrofs(HEXDIGITS, (d), 0))
#define HEXDIGIT_TO_DEC(d) ((HEXDIGIT_TO_DEC_RAW(d) | 0x10) - 0x10)
#define DEC_TO_HEXDIGIT(d) (substring(HEXDIGITS, (d), 1))

vector rgb_to_hsl(vector rgb);
vector hsl_to_rgb(vector hsl);
vector rgb_to_hsv(vector rgb);
vector hsv_to_rgb(vector hsv);
string rgb_to_hexcolor(vector rgb);

float boxesoverlap(vector m1, vector m2, vector m3, vector m4);
float boxinsidebox(vector smins, vector smaxs, vector bmins, vector bmaxs);

typedef float(string s, vector fontSize) textLengthUpToWidth_widthFunction_t;
float textLengthUpToWidth(string theText, float maxWidth, vector theSize, textLengthUpToWidth_widthFunction_t w);
string textShortenToWidth(string theText, float maxWidth, vector fontSize, textLengthUpToWidth_widthFunction_t tw);

string getWrappedLine_remaining;
string getWrappedLine(float w, vector fontSize, textLengthUpToWidth_widthFunction_t tw);

float isGametypeInFilter(float gt, float tp, string pattern);

typedef void(float i1, float i2, entity pass) swapfunc_t; // is only ever called for i1 < i2
typedef float(float i1, float i2, entity pass) comparefunc_t; // <0 for <, ==0 for ==, >0 for > (like strcmp)
void shuffle(float n, swapfunc_t swap, entity pass);
void heapsort(float n, swapfunc_t swap, comparefunc_t cmp, entity pass);

string swapwords(string str, float i, float j);
string shufflewords(string str);

string substring_range(string s, float b, float e);

vector solve_quadratic(float a, float b, float c);
// solution 1 -> x
// solution 2 -> y
// z = 1 if a real solution exists, 0 if not
// if no real solution exists, x contains the real part and y the imaginary part of the complex solutions x+iy and x-iy

void check_unacceptable_compiler_bugs();

float compressShotOrigin(vector v);
vector decompressShotOrigin(float f);

string records_reply, lsmaps_reply, maplist_reply; // cached replies

float RandomSelection_totalweight;
float RandomSelection_best_priority;
entity RandomSelection_chosen_ent;
float RandomSelection_chosen_float;
string RandomSelection_chosen_string;
void RandomSelection_Init();
void RandomSelection_Add(entity e, float f, string s, float weight, float priority);

vector healtharmor_maxdamage(float h, float a, float armorblock); // returns vector: maxdamage, armorideal, 1 if fully armored
vector healtharmor_applydamage(float a, float armorblock, float damage); // returns vector: take, save, 0

string getcurrentmod();

#ifndef MENUQC
#ifdef CSQC
float ReadInt24_t();
#else
void WriteInt24_t(float dest, float val);
#endif
void defer(float fdelay, void() func);
#endif

string mmss(float tenths);

float TeamColorSkin(float);
float approach(float v, float t, float d);

// TODO: serverside setting with a list of those maybe? :p
#define ISFAGGOTMAP(m) (substring(m, 0, 7) == "fagcity" || substring(m, 0, 7) == "ikzbdsm")

string FormatDamage(float f);

#ifndef SVQC
string FlagIcon(string cn);
string firstkeyfor(string cmds);
#endif

float fexists(string f);

#ifndef MENUQC
string Team_ColorCode(float t);
string Team_ColorName(float t);
string Team_ColorNameLowerCase(float t);
string TeamName(float t);
string ColoredTeamName(float t);
#endif

void GameCommand(string);
void backtrace(string msg);

float chr_in_str(float c, string str);

typedef string(string, string) regex_sub_callback;
string regex_sub_string;

regex_sub_callback regex_sub_default;

float regex_sub_once(string regex, string input, float offset, float reflags, string sub, regex_sub_callback subfunc);
float regex_sub(string regex, string input, float reflags, string sub, regex_sub_callback subfunc);

typedef __undefined va_parm;

var va_parm __va_parm0;
var va_parm __va_parm1;
var va_parm __va_parm2;
var va_parm __va_parm3;
var va_parm __va_parm4;
var va_parm __va_parm5;
var va_parm __va_parm6;
var va_parm __va_parm7;

#define VA_MAXPARMS 8
#define VA_INIT \
    __va_parm0 = @0; \
    __va_parm1 = @1; \
    __va_parm2 = @2; \
    __va_parm3 = @3; \
    __va_parm4 = @4; \
    __va_parm5 = @5; \
    __va_parm6 = @6; \
    __va_parm7 = @7;

va_parm va_get(float pidx);
void va_test(string fmt, ...);

float autocvar_utf8_enable;
float autocvar__rm_font_setting;

float utf8_supported(void);
float utf8_enabled(void);
void utf8_enable(void);
void utf8_disable(void);
void load_fonts(void);
void fix_fonts(void);

#ifdef SVQC
float stringwidth(string s, float handle_colors, vector text_size);
#endif

float stringwidth_colors(string s, vector theSize);
float stringwidth_nocolors(string s, vector theSize);

//DP_RM_REGEX
//idea: Akari
//darkplaces implementation: Akari

typedef float(string regex, string input, float offset, float size, float flags) regex_match_builtin_t;

regex_match_builtin_t regex_match_642 = #642;
regex_match_builtin_t regex_match_800 = #800;
var regex_match_builtin_t regex_match;

const RE_IGNORE_CASE            =  1;
const RE_NO_MATCH               = -1;
const RE_UNEXPECTED_QUANTIFIER  = -2;
const RE_UNBALANCED_BRACKETS    = -3;
const RE_INTERNAL_ERROR         = -4;
const RE_INVALID_CHARACTER_SET  = -5;
const RE_INVALID_METACHARACTER  = -6;
const RE_CAPS_ARRAY_TOO_SMALL   = -7;
const RE_TOO_MANY_BRANCHES      = -8;
const RE_TOO_MANY_BRACKETS      = -9;

string pickfile(string basepath, ...);

void cvar_archive(string cvarname, string defaultval);

float autocvar_rm_ignore_missing_required_extensions;

void require_extension(string ext);

/*
 *  Operator overloads
 */

// defined per module, maps directly to the strcat builtin
string operator+(string s1, string s2);

string operator+(string s, float f);
string operator+(float f, string s);
string operator+(string s, vector v);
string operator+(vector v, string s);
string operator+(string s, entity e);
string operator+(entity e, string s);
