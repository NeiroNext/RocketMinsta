
void HG_Init();
void HG_Precache();
void HG_SetContext(float isalt);
void HG_Frame();
void HG_Attack();
void HG_PlayerSpawn();
void HG_PlayerSpawnEx(entity);
void HG_PlayerJoin();
void HG_ResetState(entity);
void HG_GiveBonus(entity, float, float, string, float);
void HG_GiveRandomBonus(entity, float, string, float);
void HG_Napalm();
void HG_Detonate(entity);
void HG_DetonateAll(entity);
void HG_RemoveAll(entity);
float HG_PlayerMayDetonate(entity);
float HG_ShowMenu(float);
void HG_Grenade_Remove(void);
void HG_Grenade_FadeOut(entity);
void HG_Grenade_Think();
void HG_Stick(void);
float HG_RegenTime(entity);
float HG_RegenLimit(entity);
void HG_SetRegenTime(entity e, float t);
void HG_Trigger(void);
void HG_Cloak_Trigger(void);
void HG_Shield_Trigger(void);
void HG_Bait_Body_Boom(entity body);
float HG_Shield_Damage(entity attacker, float damage, float deathtype, vector hitloc);
void HG_SetCooldown(.float cdfield, float gcd, float cd);

.vector org_explosion;
.float nextparticle;

.float hg_power;
.float hg_state;
.float hg_altstate;
.float hg_next1;
.float hg_next2;
.float hg_bonus_next;
.float hg_ammo1;
.float hg_ammo2;
.float hg_type1;
.float hg_type1_picked;
.float hg_type1_picked_nextround;
.float hg_type2;
.float hg_type2_picked;
.float hg_type2_picked_nextround;
.float hg_bonus;
.float hg_bonustype;
.float hg_isbonus;
.float hg_regentime1;
.float hg_maxregentime1;
.float hg_regenrate1;
.float hg_regenpaused1;
.float hg_regentime2;
.float hg_maxregentime2;
.float hg_regenrate2;
.float hg_regenpaused2;
.float hg_deathtime;
.float hg_detonable;
.float hg_detonatetime;
.float hg_detonatedelay;
.float hg_detonateready;
.float hg_detonables;
.float hg_detonable_updated;
.float hg_nextsnd;
.float hg_sndcount;
.float hg_clearammo;
.float hg_detonatepressed;
.float hg_ranthink;
.float hg_wp_nextthink;
.float hg_wp_state;
.float hg_sticked;
.float hg_nadesused;
.float hg_optout;
.float hg_optout_nextround;
.float hg_alwaysask;
.float hg_altcharge;
.float hg_adept;
.float hg_tl_revived;

var .float hg_ctx_next;
var .float hg_ctx_type;
var .float hg_ctx_ammo;
var .float hg_ctx_type;
var .float hg_ctx_type_picked;
var .float hg_ctx_type_picked_nextround;
var .float hg_ctx_regentime;
var .float hg_ctx_maxregentime;
var .float hg_ctx_regenrate;
var .float hg_ctx_regenpaused;

.float hg_transloc_solidcheck;

.entity hg_transloc_last;

.vector hg_lastvel;

.float hg_plasmalock;
.float hg_plasmalock_nexteffect;
.entity hg_plasmalock_owner;

.float hg_shield;
.float hg_shieldstat;
.float hg_shieldpower;
.float hg_shieldmax;
.float hg_shieldhealth;
.float hg_shield_oldmovetype;
.float hg_shield_stored;
.float hg_shield_stored_limit;
.entity hg_shieldmodel;

.float hg_stealth;
.float hg_stealthalpha;
.float hg_stealthtime;
.float hg_wasstealth;
.float hg_stealth_saved;
.float hg_stealth_protectionexpiretime;

.float hg_plasma_projrange;
.float hg_plasma_projdps;
.float hg_plasma_projdps_delay;
.float hg_plasma_projdps_next;
.float hg_plasma_projdps_last;
.float hg_plasma_projdist;

.entity hg_linker;
.float hg_linker_range;
.float hg_linker_factor;
.float hg_linker_hps;
.float hg_linker_buffpower;

.float hg_sentry_energy;

// for hud only
.float hg_launchspeed;

.entity hg_waypoint;

float g_nadgets_oldhitboxes;
float g_nadgets_detonatelaunches;
float g_nadgets_double;

float hg_plasma_group;

.entity bait_ref;

float hg_context_isalt;
float hg_context_isaltintended;

#define hg_type hg_type1

#define GRENVARNAME(t,v) strcat("g_nadgets_", HG_TypeToName(t), "_", (v))
#define GRENVAR(t,v) (cvar(GRENVARNAME(t,v)))

#define IF_HG_LINKER_APPLICABLE(p) if(p.takedamage) if(!p.jb_isprisoned) if(p.deadflag == DEAD_NO) if(!p.frozen)

#define HG_DO_IN_ALL_CONTEXTS(block) { HG_SetContext(FALSE); block if(g_nadgets_double) { HG_SetContext(TRUE); block } }
#define HG_LOOP_FOR_ALL_CONTEXTS(i,block) for(i = 0; i <= g_nadgets_double; ++i) { HG_SetContext(i); block }
